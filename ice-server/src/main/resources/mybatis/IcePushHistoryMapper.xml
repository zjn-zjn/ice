<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ice.server.dao.mapper.IcePushHistoryMapper">
    <resultMap id="BaseResultMap" type="com.ice.server.dao.model.IcePushHistory">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="app" jdbcType="INTEGER" property="app"/>
        <result column="ice_id" jdbcType="BIGINT" property="iceId"/>
        <result column="reason" jdbcType="VARCHAR" property="reason"/>
        <result column="operator" jdbcType="VARCHAR" property="operator"/>
        <result column="create_at" jdbcType="TIMESTAMP" property="createAt"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ice.server.dao.model.IcePushHistory">
        <result column="push_data" jdbcType="LONGVARCHAR" property="pushData"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        "id", "app", "ice_id", "reason", "operator", "create_at"
    </sql>
    <sql id="Blob_Column_List">
        "push_data"
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.ice.server.dao.model.IcePushHistoryExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from "ice_push_history"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.ice.server.dao.model.IcePushHistoryExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from "ice_push_history"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from "ice_push_history"
        where "id" = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from "ice_push_history"
        where "id" = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.ice.server.dao.model.IcePushHistoryExample">
        delete from "ice_push_history"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ice.server.dao.model.IcePushHistory" useGeneratedKeys="true" keyProperty="id">
        <!-- 使用useGeneratedKeys="true"和keyProperty="id"让MyBatis自动获取自增ID -->
        insert into "ice_push_history" ("app", "ice_id", "reason",
        "operator", "create_at", "push_data"
        )
        values (#{app,jdbcType=INTEGER}, #{iceId,jdbcType=BIGINT}, #{reason,jdbcType=VARCHAR},
        #{operator,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{pushData,jdbcType=LONGVARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.ice.server.dao.model.IcePushHistory" useGeneratedKeys="true" keyProperty="id">
        <!-- 使用useGeneratedKeys="true"和keyProperty="id"让MyBatis自动获取自增ID -->
        insert into "ice_push_history"
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="app != null">
                "app",
            </if>
            <if test="iceId != null">
                "ice_id",
            </if>
            <if test="reason != null">
                "reason",
            </if>
            <if test="operator != null">
                "operator",
            </if>
            <if test="createAt != null">
                "create_at",
            </if>
            <if test="pushData != null">
                "push_data",
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="app != null">
                #{app,jdbcType=INTEGER},
            </if>
            <if test="iceId != null">
                #{iceId,jdbcType=BIGINT},
            </if>
            <if test="reason != null">
                #{reason,jdbcType=VARCHAR},
            </if>
            <if test="operator != null">
                #{operator,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="pushData != null">
                #{pushData,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ice.server.dao.model.IcePushHistoryExample"
            resultType="java.lang.Long">
        select count(*) from "ice_push_history"
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update "ice_push_history"
        <set>
            <if test="record.id != null">
                "id" = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.app != null">
                "app" = #{record.app,jdbcType=INTEGER},
            </if>
            <if test="record.iceId != null">
                "ice_id" = #{record.iceId,jdbcType=BIGINT},
            </if>
            <if test="record.reason != null">
                "reason" = #{record.reason,jdbcType=VARCHAR},
            </if>
            <if test="record.operator != null">
                "operator" = #{record.operator,jdbcType=VARCHAR},
            </if>
            <if test="record.createAt != null">
                "create_at" = #{record.createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.pushData != null">
                "push_data" = #{record.pushData,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update "ice_push_history"
        set "id" = #{record.id,jdbcType=BIGINT},
        "app" = #{record.app,jdbcType=INTEGER},
        "ice_id" = #{record.iceId,jdbcType=BIGINT},
        "reason" = #{record.reason,jdbcType=VARCHAR},
        "operator" = #{record.operator,jdbcType=VARCHAR},
        "create_at" = #{record.createAt,jdbcType=TIMESTAMP},
        "push_data" = #{record.pushData,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update "ice_push_history"
        set "id" = #{record.id,jdbcType=BIGINT},
        "app" = #{record.app,jdbcType=INTEGER},
        "ice_id" = #{record.iceId,jdbcType=BIGINT},
        "reason" = #{record.reason,jdbcType=VARCHAR},
        "operator" = #{record.operator,jdbcType=VARCHAR},
        "create_at" = #{record.createAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ice.server.dao.model.IcePushHistory">
        update "ice_push_history"
        <set>
            <if test="app != null">
                "app" = #{app,jdbcType=INTEGER},
            </if>
            <if test="iceId != null">
                "ice_id" = #{iceId,jdbcType=BIGINT},
            </if>
            <if test="reason != null">
                "reason" = #{reason,jdbcType=VARCHAR},
            </if>
            <if test="operator != null">
                "operator" = #{operator,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                "create_at" = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="pushData != null">
                "push_data" = #{pushData,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where "id" = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ice.server.dao.model.IcePushHistory">
        update "ice_push_history"
        set "app" = #{app,jdbcType=INTEGER},
        "ice_id" = #{iceId,jdbcType=BIGINT},
        "reason" = #{reason,jdbcType=VARCHAR},
        "operator" = #{operator,jdbcType=VARCHAR},
        "create_at" = #{createAt,jdbcType=TIMESTAMP},
        "push_data" = #{pushData,jdbcType=LONGVARCHAR}
        where "id" = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ice.server.dao.model.IcePushHistory">
        update "ice_push_history"
        set "app" = #{app,jdbcType=INTEGER},
        "ice_id" = #{iceId,jdbcType=BIGINT},
        "reason" = #{reason,jdbcType=VARCHAR},
        "operator" = #{operator,jdbcType=VARCHAR},
        "create_at" = #{createAt,jdbcType=TIMESTAMP}
        where "id" = #{id,jdbcType=BIGINT}
    </update>
</mapper>